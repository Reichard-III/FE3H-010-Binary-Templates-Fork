//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: Tile.bt
//   Authors: DeathChaos?, Triabolical, ReichardTheThird
//   Version: 1.1
//   Purpose: Parameters for monastery activities like teaTime
//  Category: Reichard
// File Mask: *fixed_lobby_common.bin
//  ID Bytes: 
//   History: 
//   1.1    2/16/25 ReichardTheThird: Started taking over maintainance and updates from previous authors
//   1.00   2019-08-31  DeathChaos - started thisProficiencies
//------------------------------------------------

//---------------------------------------------
// Includes
//---------------------------------------------
#include "Structs.bt"
LittleEndian();

local int i<hidden=true>;
local int k;
enum<ubyte> LvlRequired {
	No_Level_Requirement = 255,
};

enum<ubyte> ConstanceSunShadeMode{
	Shaded_Mode,
	Sun_Mode
};

struct File{
	FileSections Sections;
	
	FSeekNextSection(Sections);
	struct Unk1{ //0
		DataSection SectionHeader;
		struct UnknownSection1{
			struct sNPCFlags0x0{
				byte Headchef:1;
				byte DiningHallNPC:1;
				byte Counselor:1;
				byte ChoirCoordinator:1;
				
				byte bit4:1;
				byte bit5:1;
				byte Fishkeeper:1;
				byte GreenhouseKeeper:1;
			}NPCflags0x0;
			struct sNPCFlags0x1{
				byte TournamentOrganizer:1;
				byte bit1:1;
				byte bit2:1;
				byte bit3:1;
				
				byte bit4:1;
				byte VariousNPCsIncludingGateKeeper318:1;
				byte bit6:1;
				byte bit7:1;
			}NPCflags0x1;
			byte unk0x2;
			byte unk0x3;
			byte unk0x4;
			byte Sunlight;
			struct sNPCFlags0x6{
				byte Gatekeeper317:1;
				byte bit1:1;
				byte bit2:1;
				byte SaintStatueNPC:1;
				
				byte bit4:1;
				byte bit5:1;
				byte bit6:1;
				byte bit7:1;
			}NPCflags0x6;
			byte ShopLevel_Item;
			struct sExplorationFlags0x8{
				byte bit0:1;
				byte bit1:1;
				byte bit2:1;
				byte bit3:1;
				
				byte bit4:1;
				byte bit5:1;
				byte bit6:1;
				byte bit7:1;
			}Explorationflags0x8;
			byte ShopLevel_Weapon;
			BGM music;
			byte ShopLevel_Battalion;
		}unknownsection1[SectionHeader.NumEntries]<name="Unknown Section1">;
	}unk1<name="Unknown Section 0",bgcolor=cRed>;
	
	FSeekNextSection(Sections);
	struct Unk2{ //1
		DataSection Header;
		struct UnknownSection2{
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
		}unknownsection2[Header.NumEntries]<name="Unknown Section2">;
	}unk2<name="Unknown Section 1",bgcolor=cBlue>;
	
	FSeekNextSection(Sections);
	struct Unk3{ //2
		DataSection Header;
		struct UnknownSection3{
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
		}unknownsection3[Header.NumEntries]<name="Unknown Section3">;
	}unk3<name="Unknown Section 2",bgcolor=cPurple>;
	
	FSeekNextSection(Sections);
	struct Unk4{ //3
		DataSection Header;
		struct UnknownSection4{
			uint16 unk;
			CharID character<name="Character ID">;
			uint16 unk;
			uint16 unk;
			uint16 unk;
		}unknownsection4[Header.NumEntries]<name="Unknown Section4">;
	}unk4<name="Unknown Section 3",bgcolor=cDkBlue>;
	
	FSeekNextSection(Sections);
	struct RecruitRanks{ //4
		DataSection Header;
		struct RecruitRank{
			CharID charID<name="Character", bgcolor=cRed>;
			Item item1<name="Recruit Item 1", comment="Item that unit comes with when recruited">;
			Item item2<name="Recruit Item 2", comment="Item that unit comes with when recruited">;
			ClassID BeginnerClass<name="Recruited Class 1", comment="Recruited Class when Level < 10">;
			LvlRequired  LvReq<name="Level Required">;
			ClassID IntermediateClass<name="Recruited Class 2", comment="Recruited Class when Recruit Level >= 10">;
			Stat StatReq2<name="Stat Type Required">;
			RankStats WepRnkTypeReq<name="Weapon Rank Type Required">;
			MinRanks Req<name="Weapon Rank Required">;
			TrueFalse SylvainFlag<name="The Sylvain Flag", bgcolor=cLtRed>;
			ubyte StatReq1<name="Stat Amount Required">;
		}recruitrank[Header.NumEntries]<name="Recruit Conditions",read=GetName>;
		byte padding[2]<hidden=true>;
	}recruitranks<name="Recruit Conditions",bgcolor=cDkYellow>;
	
	FSeekNextSection(Sections);
	struct Unk5{ //5
		DataSection Header;
		struct UnknownSection5{
			uint16 unkShort0x0;
			uint16 unkShort0x2;
			ubyte unk;
			ubyte unk;
		}unknownsection5[Header.NumEntries]<name="Unknown Section4">;
	}unk5<name="Unknown Section 5",bgcolor=cBlack>;
	
	FSeekNextSection(Sections);
	struct sItemSpotAltItems{ //6
		DataSection SectionHeader;
		struct sItemSpotAltDropItem{
			Item MiscellaneousItem<name="Miscellaneous Item">;
			ubyte AdvancedItemPool<name="Enabled in Advanced Item Pool">;
			ubyte IntermediateItemPool<name="Enabled in Intermediate Item Pool">;
			ubyte BasicItemPool<name="Enabled in Basic Item Pool">;
			ubyte unk1<name="padding?">;
		}ItemSpotAltDropItem[SectionHeader.NumEntries]<name="ItemSpot Alt Drop Item">;
	}ItemSpotAltItems<name="ItemSpot Alt Drop Items",bgcolor=cGreen, comment="If ItemSpots are configured to drop random items, they have a chance to drop these items">;
	
	FSeekNextSection(Sections);
	struct UnknownSection7{ //7
		DataSection Header;
		struct Unk7{
			ushort unkShort0x0<name="Story Flags?">;
			NameID charID<name="Character">;
			ushort unkShort0x4;
			ushort unkShort0x6;
			ushort unkShort0x8;
			ubyte unkByte0xa;
			ubyte unkByte0xb;
			ubyte RotationOctant;
			ubyte unkByte0xd;
			ubyte unkByte0xe;
			ubyte unkByte0xf;
			ubyte unkByte0x10;
			ubyte unkByte0x11;
			ubyte unkByte0x12;
			ubyte unkByte0x13;
			ubyte unkByte0x14;
			ubyte unkByte0x15;
			ubyte unkByte0x16;
			ubyte RotationOctant_TS;
		}unk7[Header.NumEntries]<name="Recruit Conditions 2",read=GetName2>;
	}unknownsection7<name="Recruit Conditions 2",bgcolor=cDkRed>;
	
	FSeekNextSection(Sections);
	struct Unk8{ //8
		DataSection Header;
		struct UnknownSection8{
			float unkFloat0x0;
			float unkFloat0x4;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
		}unknownsection8[Header.NumEntries]<name="Unknown Section8">;
	}unk8<name="Unknown Section 8",bgcolor=cDkPurple>;
		
	FSeekNextSection(Sections);
	struct Unk9{ //9
		DataSection Header;
		struct UnknownSection9{
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			long unkLong0x40;
		}unknownsection9[Header.NumEntries]<name="Unknown Section9">;
		byte unknownExtra[16];
	}unk9<name="Unknown Section 9",bgcolor=cDkGreen>;
	
	FSeekNextSection(Sections);
	struct FavoriteTeaLeaves{ //10
		DataSection Header;
		struct FavoriteTea{
			CharID CharacterID;
			Gifts disliked[4];
			MiscItem tea<name="Favorite Tea">;
			MiscItem tea<name="Favorite Tea">;
			MiscItem tea<name="Favorite Tea">;
			MiscItem tea<name="Favorite Tea">;
		}favoritetea[Header.NumEntries]<name="Favorite Tea Leaves",read=GetName3>;
		byte padding[2]<hidden=true>;
	}favoritelealeaves<name="Favorite Tea Leaves",bgcolor=cLtGreen>;
	
	FSeekNextSection(Sections);
	struct FinalComment{ //11
		DataSection Header;
		struct FinalTeaComment{
			CharID CharacterID;
			ConstanceSunShadeMode ConstanceMode<comment="If in Shaded Mode, ">;
			ubyte CommentID;
			TrueFalse Nod;
			TrueFalse Laugh;
			TrueFalse Commend;
			TrueFalse Disagree;
			TrueFalse Admonish;
			TrueFalse Sigh;
			TrueFalse Chat;
			TrueFalse SipTea;
			TrueFalse Blush;
			TrueFalse Praise;
		}finalteacomment[Header.NumEntries]<name="Final Comment",read=GetName4>;
	}finalcomment<name="Final Comment",bgcolor=cLtRed>;
	
	FSeekNextSection(Sections);
	struct TeaTopics{ //12
		DataSection Header;
		for (i = 0; i < Header.NumEntries; ++i){
			struct TeaResponse {
				byte response[Header.size];
			}answer;
		}
		byte padding[2]<hidden=true>;
	}tea;
	
	FSeekNextSection(Sections);
	TeaTopics Tea2<name="Tea Time Topic Responses 2",bgcolor=cLtRed>; //13
}file<open=true>;

string GetName(RecruitRank& value){      return EnumToString(value.charID); }
string GetName2(Unk7& value){            return EnumToString(value.charID); }
string GetName4(FinalTeaComment& value){ return EnumToString(value.CharacterID); }
string GetName3(FavoriteTea& value){     return EnumToString(value.CharacterID); }