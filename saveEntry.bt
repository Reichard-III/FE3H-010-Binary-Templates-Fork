//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: Save File from Falo's Save Editor
//   Authors: Triabolical, ReichardTheThird
//   Version: 1.0
//   Purpose: Map out Character File Exports
//  Category: Reichard
// File Mask: slot*
//  ID Bytes: 
//   History: 
//   1.2    10/18/25 ReichardTheThird: Renamed from Character.bt to SaveEntry.bt    
//   1.1    06/07/25 ReichardTheThird: Added BattalionReserve @ 0x250f8
//                                      Changed to use "include_enums.bt" instead
//   1.0    02/16/25 ReichardTheThird: Started taking over maintainance and updates from previous authors
//------------------------------------------------
#include "Structs.bt"
#include "saveEntry_structs.bt"
LittleEndian();
local int i;
struct ItemBlock {
	Item_Adjusted item<bgcolor=cGreen>;
	byte remainingDurability;
	byte count<bgcolor=cLtGreen>;
};

struct BattalionData {
	CharID character;
	ushort Exp;
	ushort Endurance;
	BattalionID battalion;
	byte Gambit;
};

struct CharacterBlock {
	ItemBlock CharacterItem[6]<read=EnumToString(item)>;
	BattalionData battalion<read=EnumToString(battalion), bgcolor=cGray>;
	uint seed<bgcolor=cRed, name="Seed">;
	CharID ID<name="ID", bgcolor=cBlue>;
	short unk<bgcolor=cYellow>;
	short unk2<bgcolor=cYellow>;
	short unk3<bgcolor=cYellow>;
	short exp;
	short equipped_item;
	short Accessory_item_equipped;
	SkillExp skill_exp;
	short current_class_exp;
	ubyte Level;
	ubyte Class;
	ubyte MaxHP;
	ubyte HPModifier;
	Stats CurrentStats;
	CombatArtUnlock CombatArtAvailable<name="Combat Arts Unlocked", bgcolor=cDkRed>;
	BaseAbilityUnlock BaseGameAbilities<name="Unlocked Base Abilities", bgcolor=cDkBlue>;
	AbilityID EquippedAbilities[5]<name="Equipped Abilities", bgcolor=cBlue>;
	CombatArtID EquippedCombatArts[3]<name="Equipped Combat Arts", bgcolor=cRed>;
	ubyte ItemCount;
	StartingRanks CurrentSkillLevel<name="Skill MinRankss", bgcolor=cYellow>;
	ubyte ClassLevel;
	ubyte MagicDuarability[12]<name="Magic Duarability", bgcolor=cPurple>;
	SpellID MagicEquipped[12]<name="Magic Equipped", bgcolor=cPurple>;
	UnitFlags flags<bgcolor=cSilver>;
	byte CurrentCostume;
	byte QuestMarkerMaybe;
	byte CostumeFlags;
	byte unk_0xB3;
	byte CookingBoost[4];
	byte unk_0xb8[6];
	DLCAbilityUnlock AbilityAvailableSet2<name="Unlocked DLC Abilities", bgcolor=cBlue>;
	byte UnknownValues0xc0[4]<bgcolor=cBlack>;
	byte Motivation;
	byte TimesGiftedMaybe;
	byte TimesInstructed[11];
	byte UnknownV[2]<bgcolor=cBlack>;
	ClassUnlock ClassUnlockFlagsSet1[8];
	byte LearningGoal<bgcolor=cRed>;
	byte unknown;
	byte MonthlyCharmIncreaseMaybe;
	byte TotalTeaTimes;
	struct sMonasteryStatus{
		byte HasEaten:1;
		byte flag1:1;
		byte flag2:1;
		byte flag3:1;
		byte flag4:1;
		byte HasUsedSauna:1;
		byte SaunaRelaxed:1;
		byte SaunaVeryRelaxe:1;
	}MonasteryStatus;
	byte unknownX[2];
	byte TotalTeaCharmCountMaybe;
	ClassUnlock ClassUnlockFlagsSet2[3];
	short RecruitmentRelated[4];
	byte junk[12];
	short adjutantID;
	short SkillExp2[11];
	short class_exp[100]<bgcolor=cBlue>;
	byte deploy;
	byte deploy_slot;
	StartingRanks skill_level2<bgcolor=cRed>;
	byte class_level[100]<bgcolor=cGreen>;
	byte unknown_possiblyPadding;
};

struct SaveHeader {
	int value;
	int version;
	int hash;
}header;
ItemBlock items[400]<name="Items">;
int item_count;
CharacterBlock character[60]<read=EnumToString(ID)>;
char PlayerName[40];
byte unkByte0x903c;
Month BylethBirthMonth<comment="the Month is 0 indexed, i.e. 0 = January (1st month)">;
byte BylethBirthDay;


FSeek(0x23200-0x1b);
struct sPlayerData{
	byte unkByte[8];
	struct sOnlineCharacter{
		byte unkByte0x0[0x34];
		CharID CharacterID;
		byte unkByte0x36[0x17a];
	}OnlineCharacter[5];
	ubyte unk0x878[0x1b8];
	sBattalionBarracks BattalionBarracks;
	uint Playtime;
	uint Money;
	uint unkownInt0x1078;
	uint Chapter;
    sSupportExp SupportExp;
	Difficulty DifficultyLevel;
	ubyte GameMode;
	ubyte Route;
	ubyte Timeskip;
	ScenarioName CurrentScenario;
	byte MonasteryScriptID;
	ubyte Flags_271[271];
	struct sStorehouseItems{
		for(i=0;i<223;i++){
			struct sStorehouseItemsEntry{
				local string display;
				local MiscItem Name = i;
				ubyte StorehouseItems;
				display+=Str("%d - ",StorehouseItems);
				display += EnumToString(Name);
			}StorehouseItemsEntry<read = display>;
		};
	}StorehouseItems;
	
	struct sLostItemsCount{
		for(i=0;i<225;i++){
			struct sLostItemsCountEntry{
				local string display;
				local Gifts Name = i;
				ubyte StorehouseItems;
				display+=Str("%d - ",StorehouseItems);
				display += EnumToString(Name);
			}LostItemsCountEntry<read = display>;
		};
	}LostItemsCount;
	byte unk0x1571[0x25f];
	byte GameCompletionCount;
	byte unk0x15d1[3];
	byte mapRngSeed_;
	byte unk0x17d5[0x5be];
	struct sLostItemsCount2{
		for(i=0;i<245;i++){
			struct sLostItemsCountEntry2{
				local string display;
				local Gifts Name = i;
				ubyte StorehouseItems;
				display+=Str("%d - ",StorehouseItems);
				display += EnumToString(Name);
			}LostItemsCountEntry2<read = display>;
		};
	}LostItemsCount2;
}PlayerData;

FSeek(0x250c8-0x1b);
struct sActivities{
	byte chicken[0xc];
	uint Renown;
	byte unkActivityBytes0x10[2];
	ushort ProfessorExp;
	CharID BylethSupportVisitList_[7];
	CharID UnkCharsMaybe_[2];
	byte CalendarDay;
	byte ActivityExplore;
	byte ActivityLesson;
	byte ActivityBattle;
	byte unkLOL;
	sSaintStatue_UpgradeLevels SaintStatue_UpgradeLevels;
	byte BattalionShopLevel;
	sBattalionShopStock BattalionShopStock;
	sMonasteryMerchantStock MonasteryMerchantStock;
	sAnnaSecretShopStock AnnaSecretShopStock;
	byte WeaponShopLevel;
	sWeaponShopStock WeaponShopStock;
	byte ItemShopLevel;
	sEquipmentShopStock EquipmentShopStock;
	sItemShopStock ItemShopStock;
	ubyte unk10ByteArray0[10];
	ubyte unk10ByteArray1[10];
	ubyte unk100ByteArray[100];
	MiscItem SeedsSetInGreenhouse[5];
	ubyte CultivationMethod;
	MiscItem MiscItemByte;
	ubyte Calendar7Index;
	ubyte ComparedTo3d3;
	ubyte ComparedTo3d2;
	ubyte unk0x3d4[13]<name="AdviceBoxEntriesCompleted">;
    ubyte unk0x3e1[6];
	ubyte unk5Byte[5];
	ubyte unk0x3ec[8];
	sQuestStatuses QuestStatuses;
	struct sAuxBattles{
		ScenarioName NormalAuxBattle0;
		ScenarioName NormalAuxBattle1;
		ScenarioName CalendarEventAux;
	}AuxBattles;
	ubyte MatchesSomethingInFreeScenario0[3];
	ubyte unk0x491[6];
	ubyte FixedLobbyQuestTable0_Index;
	sPreTimeSkipQuestionsAsked PreTimeSkipQuestionsAsked;
	sPostTimeSkipQuestionsAsked PostTimeSkipQuestionsAsked;
	sFacultyTrainingCompleted FacultyTrainingCompleted;
	ubyte unk0x4b9[26];
	ubyte SpotDataEnabledFlagsA_[38];
	ubyte SpotDataEnabledFlagsB_[38];
	ubyte SpotDataEnabledFlagsC_[38];
	ubyte unk0x545[3]<name="ActiveParalogueFlags?">;
	MiscItem MiscItemsToRemove[2];
	ubyte MiscItemAmountToRemove[2];
	ubyte BitFlagArray0x54c[13];
	ubyte unkByte0x559_RelatedToCharArray;
	ubyte unkByte0x55a_RelatedToCharArray;
	ubyte ProfessorRankRelated;
	ubyte unk0x55c<name="ShopUpdateFlags?">;
	ubyte PlayLog_Wark;
	ubyte PlayLog_Lecture;
	ubyte PlayLog_ToBattle;
	ubyte PlayLog_Rest;
	ubyte PlayLog_TrainMount;
	ubyte PlayLog_Sing;
	ubyte PlayLog_Lunch;
	ubyte PlayLog_Cooking;
	ubyte PlayLog_Drill;
	ubyte PlayLog_TeaParty;
	ubyte PlayLog_Scout;
	ubyte unk0x568[4];
	ubyte InfluencerUpgradeLevel;
	sPaganAltarWeaponShopStock PaganAltarWeaponShopStock;
	sPaganAltarEquipShopStock PaganAltarEquipShopStock;
	sPaganAltarItemShopStock PaganAltarItemShopStock;
	sMiscItemShopStock MiscItemShopStock;
}Activities;