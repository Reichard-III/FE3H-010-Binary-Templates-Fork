//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: 35.bin/ fixed_calendar.bin (patch3)
//   Authors: NellsRelo, ReichardTheThird
//   Version: 1.0
//   Purpose: Mapping of fixed_calendar.bin.
//   Category: Reichard
//  File Mask: *fixed_CalendarData.bin
//   History:
//   1.1    09/02/25 ReichardTheThird: Updated RareMonsterSighting to RewardBinType
//   1.0    03/16/25 ReichardTheThird: Started taking over maintenance and updates from previous authors
//   0.81   11/18/20 [FF7] Sephiroth: Added tournament data to UnknownData5 / Unknown30Byte
//   0.80   08/14/20 NellsRelo: Start
//------------------------------------------------
#include "include_Enums.bt"

LittleEndian();
local int i<hidden=true>;
struct HeaderPadding {
    byte Padding[0x34]<bgcolor=cDkYellow>;
};

// Birthdays and Holidays (and something else)
struct CelebrationData {
    int celebrationMagic<bgcolor=cLtGreen>;
    int celebrationCount<bgcolor=cLtGreen>;
    int celebrationSize<bgcolor=cLtGreen>;
	HeaderPadding eventHeaderPadding<name="Padding">;
    for( i = 0; i < celebrationCount; i++ ) {
        struct Celebration {
            local CalendarEvent celebrationName;
            celebrationName = i;

            //Determines who's birthday on Birthdays, unknown use on Type-3 events
            CharID relatedCharID<bgcolor=cDkGreen,name="Related Unit">;
            CharID relatedCharID2<bgcolor=cYellow,name="Related Unit (2)">;
            CharID relatedCharID3<bgcolor=cYellow,name="Related Unit (3)">;

            ubyte eventDay<bgcolor=cDkGreen,name="Day of the Month">;

            // Note that these will be ordered by Celebration, not Character ID
            CelebrationType eventType<bgcolor=cDkGreen,name="Type of Event">;
            Month eventMonth<bgcolor=cDkGreen,name="Month">;
            CelebrationActivity eventActivity<bgcolor=cDkGreen,name="Activity (Holidays)">;
            struct sRouteFlags{
                byte SilverSnow:1;
                byte AzureMoon:1;
                byte VerdantWind:1;
                byte CrimsonFlower:1;
                
                byte bit4:1;
                byte bit5:1;
                byte bit6:1;
                byte bit7:1;
            }RouteFlags;

            // Celebration is visible on odd numbers, hidden on even ones
            // Outlier is Jeritza's birthday, which uses a 2. Hidden outside
            // of Crimson Flower?
            DisplayCircumstances uncDisplayCircumstances<bgcolor=cYellow>;
        } celebration<name="Celebration",read=getCelebrationName>;
    };
};

// Covers Free days, missions, and beginning of the month
struct Schedule {
    RewardBinType rareMonsterSighting<name="Rare Monster Sighting">;

    // When enabling Battle during Chapter 1, the Battles list will
    // be empty. During Chapter 2, even by enabling a map to show up
    // in Chapter 2 in fixed_scenario.bin, it will be a Practice Battle,
    // and attempting to load it will crash the game.
    struct FreeDayOptions {
		ubyte bit0 : 1<name="Disable Explore">;
        ubyte bit1 : 1<name="Disable Battle">;
        ubyte bit2 : 1<name="Disable Seminar">;
        ubyte bit3 : 1<name="Disable Rest">;
        
        ubyte bit4 : 1<name="UnusedOption4?">;
        ubyte bit5 : 1<name="UnusedOption5?">;
        ubyte bit6 : 1<name="UnusedOption6?">;
        ubyte bit7 : 1<name="UnusedOption7?">;
    } freeDayOptions<name="Free Day Options">;
    Month month<name="Month">;
    byte day<name="Day">;

    // Sets the chosen day to be a specific day of the week (0-6)
    // Uncertain which schedule's offset will take precedence with
    // multiple Schedules in a month touching this.
    byte weekDay<name="Weekday">;

    FoodEvents foodEvent<name="Food Event">;
    DayType dayType<name="Day Type">;
    ChoirEvents choirEvent<name="Choir Event">;
    byte unk1<bgcolor=cBlack>;
    struct sEnabledMonasteryMerchants {
		ubyte bit0 : 1<name="Southern Merchant">;
        ubyte bit1 : 1<name="Eastern Merchant">;
        ubyte bit2 : 1<name="Dark Merchant">;
        ubyte bit3 : 1<name="Anna/ Replacement Girl?">;
        
        ubyte bit4 : 1<name="UnusedMerchant4?">;
        ubyte bit5 : 1<name="UnusedMerchant5?">;
        ubyte bit6 : 1<name="UnusedMerchant6?">;
        ubyte bit7 : 1<name="UnusedMerchant7?">;
    } EnabledMonasteryMerchants<name="Enabled Monastery Merchants">;
    GardenEvents gardenEvent<name="Gardening Event">;
    FishEvents fishingEvent<name="Fishing Event">;

    // Four distinct bytes makes sense in White Clouds, but not in
    // other routes when they have their own section. Possible
    // artifact from prior development?
    TournamentType churchTournament<name="Tournament (Silver Snow)">;
    TournamentType lionsTournament<name="Tournament (Azure Wind)">;
    TournamentType deerTournament<name="Tournament (Verdant Wind)">;
    TournamentType eaglesTournament<name="Tournament (Crimson Flower)">;

    local string scheduleName = EnumToString(month);
};

struct AcademyScheduleData {
    int scheduleMagic<bgcolor=cLtGreen>;
    int scheduleCount<bgcolor=cLtGreen>;
    int scheduleSize<bgcolor=cLtGreen>;
	HeaderPadding scheduleHeaderPadding<name="Padding">;
    Schedule schedule[scheduleCount]<read=getScheduleName,optimize=false,bgcolor=cPurple>;
};

struct ChurchScheduleData {
    int scheduleMagic<bgcolor=cLtGreen>;
    int scheduleCount<bgcolor=cLtGreen>;
    int scheduleSize<bgcolor=cLtGreen>;
	HeaderPadding scheduleHeaderPadding<name="Padding">;
    Schedule schedule[scheduleCount]<read=getScheduleName,optimize=false,bgcolor=cSilver>;
};

struct LionsScheduleData {
    int scheduleMagic<bgcolor=cLtGreen>;
    int scheduleCount<bgcolor=cLtGreen>;
    int scheduleSize<bgcolor=cLtGreen>;
	HeaderPadding scheduleHeaderPadding<name="Padding">;
    Schedule schedule[scheduleCount]<read=getScheduleName,optimize=false,bgcolor=cBlue>;
};

struct DeerScheduleData {
    int scheduleMagic<bgcolor=cLtGreen>;
    int scheduleCount<bgcolor=cLtGreen>;
    int scheduleSize<bgcolor=cLtGreen>;
	HeaderPadding scheduleHeaderPadding<name="Padding">;
    Schedule schedule[scheduleCount]<read=getScheduleName,optimize=false,bgcolor=cDkGreen>;
};

struct EaglesScheduleData {
    int scheduleMagic<bgcolor=cLtGreen>;
    int scheduleCount<bgcolor=cLtGreen>;
    int scheduleSize<bgcolor=cLtGreen>;
	HeaderPadding scheduleHeaderPadding<name="Padding">;
    Schedule schedule[scheduleCount]<read=getScheduleName,optimize=false,bgcolor=cRed>;
};

struct Unknown10Byte {
    byte unk1;
    byte unk2;
    byte unk3;
    byte unk4;
    short unused1<bgcolor=cSilver>;
    short unused2<bgcolor=cSilver>;
    short unused3<bgcolor=cSilver>;
};

struct sFishingEvent{
    local FishingEventName FEN=i;
    byte unkByte0x0[2];
    FishingEventType FishingGimmick<comment="used to index LobbyActivityTable5_0x1 data ">;
    byte unkByte0x3[7];
};

struct sGardeningEvent{
    local GardeningEventName GEN=i;
    
    byte unkByte0x0;
    byte unkByte0x1;
    byte StatBoosterRollScoreBooster;
    byte unkByte0x4;
    byte unkByte0x5;
    byte unkByte0x6;
    byte unkByte0x7;
    byte unkByte0x8;
    byte unkByte0x9;
    byte unkByte0xa;
};

struct sFishingEvents {
    int Magic<bgcolor=cLtGreen>;
    int EntriesCount<bgcolor=cLtGreen>;
    int EntriesSize<bgcolor=cLtGreen>;
	HeaderPadding classdataheaderpadding<name="Padding">;
    struct sFishingEventData{
        for(i=0;i<EntriesCount;i++){
            sFishingEvent FishingEvent<read=EnumToString(FEN)>;
        };
    }FishingEvents;
};

struct sGardeningEvents {
    int Magic<bgcolor=cLtGreen>;
    int EntriesCount<bgcolor=cLtGreen>;
    int EntriesSize<bgcolor=cLtGreen>;
	HeaderPadding classdataheaderpadding<name="Padding">;
    struct sGardeningEventData{
        for(i = 0; i<EntriesCount;i++){
            sGardeningEvent GardeningEvent<read=EnumToString(GEN)>;
        };
    }GardeningEvents;
};

struct sFoodEvent {
    byte unkByte0x0;  
    byte unkByte0x1;
    byte unkByte0x2;
    byte unkByte0x3;
                  
    byte unkByte0x4;  
    byte unkByte0x5;
    byte unkByte0x6;
    byte unkByte0x7;
                  
    byte unkByte0x8;  
    byte unkByte0x9;
};

struct sFoodEvents {
    int Magic<bgcolor=cLtGreen>;
    int EntriesCount<bgcolor=cLtGreen>;
    int EntriesSize<bgcolor=cLtGreen>;
	HeaderPadding classdataheaderpadding<name="Padding">;
    sFoodEvent FoodEvent[EntriesCount];
};

struct sChoirEvents {
    int Magic<bgcolor=cLtGreen>;
    int EntriesCount<bgcolor=cLtGreen>;
    int EntriesSize<bgcolor=cLtGreen>;
	HeaderPadding classdataheaderpadding<name="Padding">;
    Unknown10Byte unknown[EntriesCount];
};

struct sTournamentEvent {
    ushort EntryFee<bgcolor=cBlue>;
    Item unk1<name="Prize Item", comment="put a comment here">;
    short unk2<name="Gold reward #1">;
    short unk3<name="Gold reward #2">;
    short unk4<name="Gold reward #3">;
    short unk5<name="Gold reward #4">;
    short unk6<name="Gold reward #5">;
    byte unk7<name="Player Magic?">;
    byte unk8<name="Player Weapon">;
    byte unk9<name="Heal amount">;
    byte unk10<name="Displayed Recommended Level">;
    byte unk11<name="Displayed tournament info">;
    ubyte unk12<bgcolor=cYellow,name="Opponent 1", comment="put a comment here">;
    ubyte unk13<bgcolor=cYellow,name="Opponent 2", comment="put a comment here">;
    ubyte unk14<bgcolor=cYellow,name="Opponent 3", comment="put a comment here">;
    ubyte unk15<bgcolor=cYellow,name="Opponent 4", comment="put a comment here">;
    ubyte unk16<bgcolor=cYellow,name="Opponent 5", comment="put a comment here">;
    byte unk17<name="Opponent 1 Level", comment="put a comment here">;
    byte unk18<name="Opponent 2 Level", comment="put a comment here">;
    byte unk19<name="Opponent 3 Level", comment="put a comment here">;
    byte unk20<name="Opponent 4 Level", comment="put a comment here">;
    byte unk21<name="Opponent 5 Level", comment="put a comment here">;
    byte padding<bgcolor=cBlue>;
};

struct sTournamentEvents {
    int unkMagic<bgcolor=cLtGreen>;
    int unkCount<bgcolor=cLtGreen>;
    int unkSize<bgcolor=cLtGreen>;
	HeaderPadding classdataheaderpadding<name="Padding">;
    sTournamentEvent TournamentEvent[unkCount];
};

struct File {
    struct SectionPointer {
        int header<bgcolor=cBlue>;
        int celebrationDataPointer<bgcolor=cAqua>;
        int celebrationDataSize<bgcolor=cAqua>;
        int academyScheduleDataPointer<bgcolor=cPurple>;
        int academyScheduleDataSize<bgcolor=cPurple>;
        int churchScheduleDataPointer<bgcolor=cSilver>;
        int churchScheduleDataSize<bgcolor=cSilver>;
        int lionsScheduleDataPointer<bgcolor=cBlue>;
        int lionsScheduleDataSize<bgcolor=cBlue>;
        int deerScheduleDataPointer<bgcolor=cDkGreen>;
        int deerScheduleDataSize<bgcolor=cDkGreen>;
        int eaglesScheduleDataPointer<bgcolor=cRed>;
        int eaglesScheduleDataSize<bgcolor=cRed>;
        int unkDataPointer6<bgcolor=cRed>;
        int unkDataSize6<bgcolor=cRed>;
        int unkDataPointer7<bgcolor=cRed>;
        int unkDataSize7<bgcolor=cRed>;
        int unkDataPointer8<bgcolor=cRed>;
        int unkDataSize8<bgcolor=cRed>;
        int unkDataPointer9<bgcolor=cRed>;
        int unkDataSize9<bgcolor=cRed>;
        int unkDataPointer10<bgcolor=cRed>;
        int unkDataSize10<bgcolor=cRed>;
    } sectionPointers;
    CelebrationData celebrationData<name="Celebration Event Table">;
    AcademyScheduleData academyScheduleData<name="White Clouds Calendar">;
    ChurchScheduleData churchScheduleData<name="Silver Snow Calendar">;
    LionsScheduleData lionsScheduleData<name="Azure Moon Calendar">;
    DeerScheduleData deerScheduleData<name="Verdant Wind Calendar">;
    EaglesScheduleData eaglesScheduleData<name="Crimson Flower Calendar">;
    sFishingEvents FishingEventTable<name="Fishing Event Table">;
    sGardeningEvents GardeningEventTable<name="Gardening Event Table">;
    sFoodEvents unkData8<name="Food Event Table">;
    sChoirEvents ChoirEventTable<name="Choir Event Table">;
    sTournamentEvents TournamentEventTable<name="Tournament Event Table">;
    

} file<open=true>;

string getCelebrationName(Celebration & q) {
    return EnumToString(q.celebrationName);
};

string getScheduleName(Schedule & q) {
    return q.scheduleName;
};