//------------------------------------------------
//--- 010 Editor v15.0.2 Binary Template
//
//      File: bsi
//   Authors: TildeHat, Raytwo
//   Version: 1.00
//   Purpose: Mapping of script files/bsi files.
//  Category: Map
// File Mask: *.bsi
//  ID Bytes: 
//   History: 
//   1.00    2019-08-05  TildeHat - Start
//   1.01    2019-05-22  Raytwo   - Rename some fields
//------------------------------------------------

LittleEndian();



struct File{
    struct HEADER{
        uint32 MagicNumber;
        uint32 Unk;
        uint32 NumOfEvents;
        uint32 Unk;
        uint32 Unk;
        uint32 Unk;
        uint32 Unk;
        uint32 Unk;
        uint32 StartOfEvents;
        uint32 LengthOfFile;
        uint32 LengthOfFile;
        uint32 LengthOfFile;
        uint32 LengthOfFile;
        uint32 LengthOfFile;
    }header<bgcolor=cGreen>;

    struct PTRTable{
        uint32 offset<format=hex>;
    }Ptrtable[header.NumOfEvents]<bgcolor=cDkRed>;
    
local int i = 0;
    for(i = 0; i <header.NumOfEvents; i++){
        FSeek(Ptrtable[i].offset);
        struct EventBlock{
            
            struct EVENTHEADER{
                uint32 eventNum<bgcolor=cPurple>;
                uint32 Unk;
                uint32 TriggerCondition<comment="10000 for OnMissionStart, 15000 for OnUnitSelected, ...">;
                uint32 Unk;
                uint32 Unk;
                uint32 Unk;
                uint32 Pointer1;
                uint32 Pointer2;
                uint32 P3EntryCount<bgcolor=cRed>;
                uint32 Pointer3;
                uint32 Unk;
                uint32 EndOfBlock;
            }eventhead<bgcolor=cDkBlue>;
            FSeek(eventhead.Pointer1);
            struct Block1{
                uint32 Magic;
                uint32 Unk;
                uint32 CommandArgCountInBlock3;
                uint32 CommandBlockIntCount<comment="Number of Int32s in the block right after">;
                local int j = 0;
                for(j = 0; j < CommandBlockIntCount; j++){
                    uint32 CommandsAndArgs;
                }
            }block1<bgcolor=cDkGreen, name="Commands block", comment="Contains the commands to execute">;
            FSeek(eventhead.Pointer2);
            struct Block2{
                uint32 EventType;
                uint32 Unk;
                uint32 Unk;
                uint32 Unk;
            }block1<bgcolor=cDkYellow>;
        }eventBlock;
    }
}file;